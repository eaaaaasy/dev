<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/dev/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev/" rel="alternate" type="text/html" /><updated>2019-04-05T16:00:59+09:00</updated><id>http://localhost:4000/dev/feed.xml</id><title type="html">test0</title><subtitle>For M.</subtitle><entry><title type="html">github.io &amp;amp; Jekyll 3</title><link href="http://localhost:4000/dev/jekyll/github.io/2019/04/04/setup-jekyll.html" rel="alternate" type="text/html" title="github.io &amp; Jekyll 3" /><published>2019-04-04T22:17:55+09:00</published><updated>2019-04-04T22:17:55+09:00</updated><id>http://localhost:4000/dev/jekyll/github.io/2019/04/04/setup-jekyll</id><content type="html" xml:base="http://localhost:4000/dev/jekyll/github.io/2019/04/04/setup-jekyll.html">&lt;h3&gt;github.io(블로그)를 만들면서 jekyll, git, github를 배워보자 3&lt;/h3&gt;

&lt;pre style=&quot;color:blue; background-color:#cccccc;&quot;&gt;
두 개의 계정으로 만든다. // git을 배우려고.
jekyll은 기본 테마로 설치한다. // 천천히 하자.
공식사이트를 많이 보자. // 많이 봐야 친해진다.

**미리해두었다.**
1. benah13yun, eaaaaasy 두 개의 계정으로 github에 가입.
2. benah13yun으로 benah13yun.github.io/dev 리파지토리 생성.
&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;color:blue;&quot;&gt;
다른 소유자의 원격저장소의 데이터를 내 로컬로 가져와보자. &lt;b&gt;clone 말고 pull~&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
프로젝트(benah13yun/dev)의 데이터를 eaaaaasy의 로컬(컴퓨터)에 받아와 보자.

로컬컴에 아무것도 없을 때는 
&lt;b&gt;git clone https://github.com/benah13yun/dev.git&lt;/b&gt; 으로 가져왔다.
이건 내 로컬에 dev라는 디렉토리를 만드는 것 부터 시작한다.
지금은 로컬에 이미 받아둔게 있기 때문에 pull을 사용해서 받아와야 한다.

내 저장소의 데이터를 받아올땐 어떻게 했는지 기억해보자.
&lt;b&gt;git pull origin master&lt;/b&gt;
그래 이렇게 했었다. 가 아니라 해본적이 없다... 어쩐지.
아무튼 위의 코드는 맞다. (강제 덮어쓰기는 -f 추가)

남의 저장소의 데이터를 내 로컬컴에 받아오는걸 할거니까.
&lt;b&gt;git pull https://github.com/benah13yun/dev master&lt;/b&gt;
이렇게 하면 된다.

origin과 master가 뭔지 알고 있었다면 쉬웠을거다.

내 원격 저장소가 origin으로 지정되어있고, 다른 원격 저장소도 짧은 이름으로 지정할 수 있다.
&lt;b&gt;git remote add [shortName] [repository URL]&lt;/b&gt;

&lt;b&gt;git remote add bena https://github.com/benah13yun/dev.git&lt;/b&gt;
이렇게 bena라는 이름으로 저장했다.

&lt;b&gt;git pull bena master&lt;/b&gt;
bena 를 master로 가져온다.

&lt;b&gt;git remote -v&lt;/b&gt; //원격 저장소의 리스트를 보고 싶다!
bena    https://github.com/benah13yun/dev.git (fetch)
bena    https://github.com/benah13yun/dev.git (push)
origin  https://github.com/eaaaaasy/dev (fetch)
origin  https://github.com/eaaaaasy/dev (push)

&lt;/pre&gt;

&lt;pre&gt;
*주의사항*
빈 디렉토리는 포함되지 않는다.
Head는 현재 브랜치의 가장 최신커밋을 의미함.
원격저장소의 이름은 origin이다.
&lt;/pre&gt;

&lt;pre&gt;
&lt;b&gt;Git을 조금 더 알아보기 출처 https://git-scm.com/book/ko/v1/t시작하기-Git-기초&lt;/b&gt;

Git은 파일을 세 가지 상태로 관리한다.
1. Committed (git commit)
 - 데이터가 로컬에 안전하게 저장되었다.
2. Modified
 - 수정한 파일이 커밋하지 않은 상태로 로컬에 있다.
3. Staged (git add)
 - 수정한 파일을 곧 커밋할 거라고 선언한 상태에 있다.

&lt;b&gt;Commands&lt;/b&gt;

git add 스테이지 영역에 올린다.
&lt;b&gt;git add -p&lt;/b&gt;

git commit 로컬저장소에 올린다.
&lt;b&gt;git commit -v&lt;/b&gt;
git fetch 로컬저장소에서 받는다.

git push 원격저장소에 올린다.
&lt;b&gt;git push origin master&lt;/b&gt;
git pull 원격저장소에서 받는다.
&lt;b&gt;git pull origin master&lt;/b&gt;

git clone
git remote

옵션
-n, --dry-run : 테스트를 한다.
-v, --verbose : 한 번 더 확인한다. ?

config
git config --global user.name &quot;userName&quot;
git config --global user.email user@email.com

branch
git branch -l

&lt;/pre&gt;</content><author><name></name></author><summary type="html">github.io(블로그)를 만들면서 jekyll, git, github를 배워보자 3</summary></entry><entry><title type="html">github.io &amp;amp; Jekyll 2</title><link href="http://localhost:4000/dev/jekyll/github.io/2019/04/02/setup-jekyll.html" rel="alternate" type="text/html" title="github.io &amp; Jekyll 2" /><published>2019-04-02T22:17:55+09:00</published><updated>2019-04-02T22:17:55+09:00</updated><id>http://localhost:4000/dev/jekyll/github.io/2019/04/02/setup-jekyll</id><content type="html" xml:base="http://localhost:4000/dev/jekyll/github.io/2019/04/02/setup-jekyll.html">&lt;h3&gt;github.io(블로그)를 만들면서 jekyll, git, github를 배워보자 1&lt;/h3&gt;

&lt;p&gt;두 개의 계정으로 작업을 한다. benah13yun, eaaaaasy&lt;br /&gt;
benah13yun은 사이트의 주인이며 eaaaaasy는 협력자이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;
SVN처럼 다른 계정(eaaaaasy)으로 benah13yun의 저장소에 커밋 해보기 (X)&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre style=&quot;text-decoration:line-through;&quot;&gt;
git clone https://github.com/benah13yun/dev.git //가져왔다!
git add . // git에 추가한다?
git commit -m 'push test' // 메시지와 함께 커밋한다?

// 올리자! 내 경우엔 계정을 묻는다. 저장되어 있다면 안물을수도 있다.
git push origin master

이렇게 하면 되는 건 줄 알았다. 비슷하다며!!
&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;
&lt;br /&gt;프로젝트 소유자가 반드시 있고, 프로젝트 소유자는 다른 사람들이 수정한 코드의 적용 여부를 결정한다.
&lt;br /&gt;
&lt;br /&gt;저장소를 내 github에 복사하고, 그것을 내 PC로 가져와서 수정한 다음, 프로젝트 소유자에게
&lt;br /&gt;” 이 코드 어때요? 쓸래요? “ 라고 물어본다.
&lt;br /&gt;소유자는 쓸지말지 결정한다.
&lt;br /&gt;
&lt;br /&gt;여기까지 아래 코드~
&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;
benah13yun 프로젝트 소유자, eaaaaasy 참여자
(eaaaaasy계정으로 하는 것이다.)

https://github.com/benah13yun/dev에 가서 fork를 누른다.
&amp;gt;&amp;gt; 이렇게 하면 내 저장소에 dev가 생성된다.

git clone https://github.com/eaaaaasy/dev
&amp;gt;&amp;gt; 내 컴퓨터에 다운 받는다.

git checkout -b 20190402ver2 //브랜치를 만든다.
&amp;gt;&amp;gt; 안만들어도 된다.

git commit -a -m 'little change' //커밋한다.

git push origin 20190402ver2 // 브랜치를 Push한다.
&amp;gt;&amp;gt; 브랜치를 안만들었으면 git push orgin master

https://github.com/eaaaaasy/dev
에서 (New) pull request 버튼을 눌러 소유자(benah13yun)에게 알린다.

benah13yun계정으로 로그인한다.
https://github.com/benah13yun/dev
에서 pull requests에서 merge pull request를 눌러 master에 병합한다.

conflict가 발생하면 merge버튼이 나오지 않는다.
해결 후 저장하면 나온다.
&lt;/pre&gt;

&lt;pre&gt;

[참고]

git branch -l //브랜치 보기
git branch -d [branchName] //브랜치 지우기

https://git-scm.com/book/ko/v2/GitHub-GitHub-프로젝트에-기여하기

&lt;/pre&gt;</content><author><name></name></author><summary type="html">github.io(블로그)를 만들면서 jekyll, git, github를 배워보자 1</summary></entry><entry><title type="html">github.io &amp;amp; Jekyll 1</title><link href="http://localhost:4000/dev/jekyll/github.io/2019/03/29/setup-jekyll.html" rel="alternate" type="text/html" title="github.io &amp; Jekyll 1" /><published>2019-03-29T22:17:55+09:00</published><updated>2019-03-29T22:17:55+09:00</updated><id>http://localhost:4000/dev/jekyll/github.io/2019/03/29/setup-jekyll</id><content type="html" xml:base="http://localhost:4000/dev/jekyll/github.io/2019/03/29/setup-jekyll.html">&lt;h3&gt;github.io(블로그)를 만들면서 jekyll, git, github를 배워보자 1&lt;/h3&gt;

&lt;pre style=&quot;color:blue;&quot;&gt;
두 개의 계정으로 만든다. // git을 배우려고.
jekyll은 기본 테마로 설치한다. // 천천히 하자.
공식사이트를 많이 보자. // 많이 봐야 친해진다.
&lt;/pre&gt;

&lt;pre&gt;
**미리해두었다.**
1. benah13yun, eaaaaasy 두 개의 계정으로 github에 가입.
2. benah13yun으로 benah13yun.github.io/dev 리파지토리 생성.
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/windows/&quot; target=&quot;_blank&quot;&gt;
https://jekyllrb-ko.github.io/docs/windows/
&lt;/a&gt; 여기를 참고하여 루비와 지킬을 설치한다.
&lt;br /&gt;윈도우 기준이고 맥은 더 쉽다.&lt;/p&gt;

&lt;p&gt;루비의 설치가 끝나면 MSYS2의 설치를 묻는데 1, 2, 3 순서로 모두 설치한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bundler&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//설치 (시간이 좀 걸림)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//버전확인&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TITLE&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//설치 (오래 걸림)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TITLE&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'내 블로그에요~'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;master&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//시작 localhost:4000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기까지 하면 github에 올라가고 로컬에서 기본 블로그가 실행된다.
기본블로그가 깔끔하다.
&lt;br /&gt;
&lt;a href=&quot;/dev/jekyll/github.io/2019/04/02/setup-jekyll.html&quot;&gt;다음 글에는 git을 사용하여 github에 올리는 방법을 쓴다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이하는 기본 블로그에 작성되어 있는 글이다. 참고용으로 남겨둔다.&lt;br /&gt;
You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">github.io(블로그)를 만들면서 jekyll, git, github를 배워보자 1</summary></entry></feed>